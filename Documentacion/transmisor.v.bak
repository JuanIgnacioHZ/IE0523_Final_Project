// Declaración del módulo y parámetros
module transmisor
		(
		RESET,
		TXD,
		TX_EN,
		TX_ER,
		GTX_CLK,
		tx_code_group
    	    );

`include "tabla_code-groups.v"	// Tabla de equivalencias para
				// los code groups y variables 
				// intermedias

// Declaración de entradas, salidas y sus roles
input wire
		RESET,
		TX_EN,
		TX_ER,
		GTX_CLK;
input wire [7:0] TXD;

output reg [9:0] tx_code_group;

// Declaración de variables internas
reg	xmit;
reg	assert_lpidle;
reg	TX_OSET_indicate;
reg	tx_disparity;	// Rnning disparity
			// TODO implementar RD de verdad
reg	tx_even;
reg [11:0] TX_OSET;	// Vairable interna para enviar los
			// símbolos a los estados que generan los
			// code groups
reg	PUDR;
reg	seg_CG_I;	// Para poder enviar el segundo
			// code group de idle y lpidle
reg	transmitting;	// Señal que se activa cuando se está
			// enviando un octeto recibido por TXD


// Declaración de vectores de estados
reg [16:0] estado_actual;	// Estados para el transmisor
reg [16:0] prox_estado;
reg [16:0] estado_anterior;

// Declaración de los nombres de los estados
localparam IDLE			=	17'b00000000000000001;
localparam XMIT_DATA		=	17'b00000000000000010;
localparam XMIT_LPIDLE		=	17'b00000000000000100;
localparam START_OF_PACKET	=	17'b00000000000001000;
localparam TX_DATA		=	17'b00000000000010000;
localparam TX_PACKET		=	17'b00000000000100000;
localparam EPD2_NOEXT		=	17'b00000000001000000;
localparam END_OF_PACKET_NOEXT	=	17'b00000000010000000;
localparam EPD3			=	17'b00000000100000000;
localparam GENERATE_CODE_GROUPS	=	17'b00000001000000000;
localparam SPECIAL_GO		=	17'b00000010000000000;
localparam DATA_GO		=	17'b00000100000000000;
localparam IDLE_DISPARITY_TEST	=	17'b00001000000000000;
localparam IDLE_DISPARITY_WRONG	=	17'b00010000000000000;
localparam IDLE_I1B		=	17'b00100000000000000;
localparam IDLE_DISPARITY_OK	=	17'b01000000000000000; // TODO opc
localparam IDLE_I2B		=	17'b10000000000000000; // TODO opc

// Definir todos los flip flops
// Se encarga de pasar del estado actual al estado siguiente
always @(posedge GTX_CLK) begin
	// La señal de reinicio funciona invertida, si RESET == 1,
	// el transmisor funciona bien, caso contrario pasa al estado
	// XMIT_DATA
	if (~RESET) begin
		estado_actual		=	IDLE;
		tx_even			=	0;
		xmit			=	0;
		assert_lpidle		=	0;
		TX_OSET_indicate	=	0;
		tx_disparity		=	0;
		tx_even			=	0;
		TX_OSET			=	'0;
		PUDR			=	0;
		seg_CG_I		=	0;
		tx_code_group		=	'0;
	end else begin
		estado_actual  		<=	prox_estado;
		tx_disparity		<=	tx_disparity + 1;
		tx_even			<=	!tx_even;
	end
end

// Lógica combinacional que se encarga
// de la transición de estados para el
// transmisor
always @(*) begin
	case (estado_actual)

		//Estado: IDLE
		// Envía los caracteres K28.5 seguido de D5.6 y luego pasa
		// al estado XMIT_DATA
		IDLE:
		begin

			// Antes que nada, establece el punto de retorno para
			// enviar el segundo caracter del code-group IDLE
			estado_anterior		=	IDLE;

			TX_OSET			=	I_CG;
			// Se verifica la disparidad
			if (tx_disparity) begin


				if (tx_even) begin
					tx_code_group	<=	K28_5_RD_Plus_BC;
				end else begin
					tx_code_group	<=	K28_5_RD_Minus_BC;
				end

				// Se activa la señal de indicate
				// luego de enviar un code-group

				// Pasa a enviar el segundo code group para idle
				prox_estado	=	IDLE_I1B;

			end else begin

				if (tx_even) begin
					tx_code_group	<=	K28_5_RD_Plus_BC;
				end else begin
					tx_code_group	<=	K28_5_RD_Minus_BC;
				end

				// Se activa la señal de indicate
				// luego de enviar un code-group

				// Pasa a enviar el segundo code group para idle
				prox_estado	=	IDLE_I2B;

			end
	
		end

		//Estado: XMIT_DATA
		XMIT_DATA:
		begin


			// Antes que nada, establece el punto de retorno para
			// enviar el segundo caracter del code-group IDLE
			estado_anterior	=	XMIT_DATA;

			// Se envía IDLE a menos que se active TX_EN
			if (TX_EN) begin

				prox_estado	=	START_OF_PACKET;

			end begin

				TX_OSET		=	I_CG;
				// Se verifica la disparidad
				if (tx_disparity) begin


					if (tx_even) begin
						tx_code_group	<=	K28_5_RD_Plus_BC;
					end else begin
						tx_code_group	<=	K28_5_RD_Minus_BC;
					end

					// Se activa la señal de indicate
					// luego de enviar un code-group
					TX_OSET_indicate	=	1;

					// Pasa a enviar el segundo code group para idle
					prox_estado	=	IDLE_I1B;

				end else begin

					if (tx_even) begin
						tx_code_group	<=	K28_5_RD_Plus_BC;
					end else begin
						tx_code_group	<=	K28_5_RD_Minus_BC;
					end

					// Se activa la señal de indicate
					// luego de enviar un code-group
					TX_OSET_indicate	=	1;

					// Pasa a enviar el segundo code group para idle
					prox_estado	=	IDLE_I2B;

				end

			end


		end

		//Estado: XMIT_LPIDLE
//		XMIT_LPIDLE:
//		begin

//		end

		//Estado: START_OF_PACKET
//		START_OF_PACKET:
//		begin

//		end

		//Estado: TX_DATA
//		TX_DATA:
//		begin

//		end

		//Estado: TX_PACKET
//		TX_PACKET:
//		begin

//		end

		//Estado: EPD2_NOEXT
//		EPD2_NOEXT:
//		begin

//		end

		//Estado: END_OF_PACKET_NOEXT
//		END_OF_PACKET_NOEXT:
//		begin

//		end

		//Estado: EPD3
//		EPD3:
//		begin

//		end

		//Estado: GENERATE_CODE_GROUPS
//		GENERATE_CODE_GROUPS:
//		begin

//		end

		//Estado: SPECIAL_GO
//		SPECIAL_GO:
//		begin

//		end

		//Estado: DATA_GO
//		DATA_GO:
//		begin

//		end

		//Estado: IDLE_DISPARITY_TEST
		// TODO Eliminar este estado

		//Estado: IDLE_DISPARITY_WRONG
		// TODO Eliminar este estado

		//Estado: IDLE_I1B
		// Envía el segundo code group de idle
		IDLE_I1B:
		begin

			if (TX_OSET == LPI_CG) begin
				tx_code_group	<=	D5_6_RD_Plus_C5;
			end else begin
				tx_code_group	<=	D6_5_RD_Plus_A6;
			end

			tx_even			<=	0;
			TX_OSET_indicate	=	1;

			// Se devuelve al estado que llamó el idle, ya sea IDLE o XMIT_DATA
			if (TX_OSET_indicate && (estado_anterior == IDLE)) begin
				prox_estado     =       XMIT_DATA;
			end else begin
				prox_estado	=	estado_anterior;
			end

			end

		//Estado: IDLE_DISPARITY_OK
		// TODO Eliminar este estado

		//Estado: IDLE_I2B
		IDLE_I2B:
		begin

			if (TX_OSET == LPI_CG) begin
				tx_code_group	<=	D26_4_RD_Plus_9A;
			end else begin
				tx_code_group	<=	D16_2_RD_Plus_50;
			end

			tx_even			<=	0;
			TX_OSET_indicate	=	1;
			// TODO poner la señal PUDR

			// Se devuelve al estado que llamó el idle, ya sea IDLE o XMIT_DATA
			if (TX_OSET_indicate && (estado_anterior == IDLE)) begin
				prox_estado     =       XMIT_DATA;
			end else begin
				prox_estado	=	estado_anterior;
			end

		end

	endcase
end



endmodule
